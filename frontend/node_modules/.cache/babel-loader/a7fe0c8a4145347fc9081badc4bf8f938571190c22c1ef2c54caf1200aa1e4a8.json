{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode'; // Correct: Named import\n\n// Set the authorization token in the Axios headers\nexport const setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\n// Function to decode JWT and return user details\nexport const getUserFromToken = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    try {\n      const decodedToken = jwtDecode(token);\n      return decodedToken.user; // Assuming the token has user details\n    } catch (error) {\n      console.error('Failed to decode token:', error);\n      return null;\n    }\n  }\n  return null;\n};\n\n// Get the user role from the JWT token\nexport const getUserRole = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    const decoded = jwtDecode(token);\n    return decoded.role; // The function returns here if token exists, so no further code is needed.\n  }\n\n  // If no token, return null\n  return null;\n};","map":{"version":3,"names":["axios","jwtDecode","setAuthToken","token","defaults","headers","common","getUserFromToken","localStorage","getItem","decodedToken","user","error","console","getUserRole","decoded","role"],"sources":["C:/Users/vanes/Desktop/VanessaVictorino_COMP308-Assignment1/app/frontend/src/utils/auth.js"],"sourcesContent":["import axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';  // Correct: Named import\r\n\r\n\r\n// Set the authorization token in the Axios headers\r\nexport const setAuthToken = (token) => {\r\n  if (token) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\n// Function to decode JWT and return user details\r\nexport const getUserFromToken = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    try {\r\n      const decodedToken = jwtDecode(token);\r\n      return decodedToken.user;  // Assuming the token has user details\r\n    } catch (error) {\r\n      console.error('Failed to decode token:', error);\r\n      return null;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// Get the user role from the JWT token\r\nexport const getUserRole = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    const decoded = jwtDecode(token);\r\n    return decoded.role;  // The function returns here if token exists, so no further code is needed.\r\n  }\r\n\r\n  // If no token, return null\r\n  return null;\r\n};\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAE;;AAGzC;AACA,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EACrC,IAAIA,KAAK,EAAE;IACTH,KAAK,CAACI,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACpE,CAAC,MAAM;IACL,OAAOH,KAAK,CAACI,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EACvD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC,MAAMJ,KAAK,GAAGK,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIN,KAAK,EAAE;IACT,IAAI;MACF,MAAMO,YAAY,GAAGT,SAAS,CAACE,KAAK,CAAC;MACrC,OAAOO,YAAY,CAACC,IAAI,CAAC,CAAE;IAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,IAAI;IACb;EACF;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAGA,CAAA,KAAM;EAC/B,MAAMX,KAAK,GAAGK,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIN,KAAK,EAAE;IACT,MAAMY,OAAO,GAAGd,SAAS,CAACE,KAAK,CAAC;IAChC,OAAOY,OAAO,CAACC,IAAI,CAAC,CAAE;EACxB;;EAEA;EACA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}